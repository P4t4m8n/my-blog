generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  PRIVATE
  ADMIN
  PUBLIC
}

model BlogPost {
  id           String        @id @default(uuid())
  title        String        @default("Untitled")
  content      String        @default("")
  description  String        @default("description")
  published    Boolean       @default(false)
  imgs         String[]
  readTime     Int
  accessibleBy Role          @default(PUBLIC)
  mainTag      String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @updatedAt
  tags         Tag[]
  blogPostTag  BlogPostTag[]
  comment      Comments[]
  like         Like[]
}

model Tag {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  blogPosts   BlogPost[]
  blogPostTag BlogPostTag[]
}

model BlogPostTag {
  blogPostId String @map("blog_post_id")
  tagId      Int    @map("tag_id")

  blogPost BlogPost @relation(fields: [blogPostId], references: [id])
  tag      Tag      @relation(fields: [tagId], references: [id])

  @@id([blogPostId, tagId])
  @@index([tagId], name: "tag_id")
  @@index([blogPostId], name: "blog_post_id")
}

model User {
  id        String     @id @default(uuid())
  email     String     @unique
  password  String
  firstName String
  lastName  String
  username  String
  role      Role
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  comments  Comments[]
  like      Like[]
}

model Comments {
  id         String   @id @default(uuid())
  content    String
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Like {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  blogPost   BlogPost @relation(fields: [blogPostId], references: [id])
  blogPostId String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
